VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "Section"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder6" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Dim st As IMAGE_SECTION_HEADER, sCode() As Byte, fOwner As Sections

Friend Property Get Struct() As IMAGE_SECTION_HEADER
Struct = st
End Property
Friend Property Let Struct(n As IMAGE_SECTION_HEADER)
st = n
End Property
Friend Sub SetOwner(cOwner As Sections)
Set fOwner = cOwner
End Sub
Friend Property Get Owner() As Sections
Set Owner = fOwner
End Property
'***********************************************************************
'**********Common Routines For Memory Mapping**************************
Property Get Length() As Long
Length = Len(st)
End Property
Property Get Pointer() As Long
Pointer = VarPtr(st)
End Property
Function Fill(ByVal hMem As Long) As Boolean
On Error Resume Next
If IsBadCodePtr(hMem) Then Exit Function
CopyMemory ByVal Pointer, ByVal hMem, Length
'*********Fill Dependent Classes From Internal Structure****
End Function

Property Get CodePointer() As Long
CodePointer = VarPtr(sCode(0))
End Property
Function FillCode(ByVal hMem As Long, ByVal dwSize As Long) As Boolean
On Error Resume Next
If IsBadCodePtr(hMem) Then Exit Function
ReDim sCode(dwSize - 1)
CopyMemory sCode(0), ByVal hMem, dwSize
End Function
Function CopyTo(ByVal hMem As Long) As Boolean
If IsBadCodePtr(hMem) Then Exit Function
CopyTo = True
CopyMemory ByVal hMem, st, Length
End Function
Function CopyCodeTo(ByVal hMem As Long) As Boolean
If IsBadCodePtr(hMem) Then Exit Function
Dim dwSize As Long
dwSize = LenBytes(sCode)
If dwSize = -1 Then Exit Function
CopyCodeTo = True

End Function
'***********************************************************************
'**********Common Routines For Memory Mapping**************************
Property Get Name() As String
Name = StrConv(st.Name, vbUnicode)
If InStr(Name, vbNullChar) <> 0 Then Name = Left(Name, InStr(Name, vbNullChar) - 1)
End Property
Property Let Name(ByVal n As String)
If Len(n) > 8 Then n = Left(n, 8)
n = n & String(8 - Len(n), 0)
Dim b() As Byte
b = StrConv(n, vbFromUnicode)
CopyMemory st.Name(0), b(0), 8
End Property

Property Get Code() As Byte()
Code = sCode
End Property
Property Get PointerToRawData() As Long
PointerToRawData = st.PointerToRawData
End Property
Property Let PointerToRawData(ByVal n As Long)
st.PointerToRawData = n
End Property
Property Get SizeOfRawData() As Long
SizeOfRawData = st.SizeOfRawData
End Property
Property Get VirtualSize() As Long
VirtualSize = st.VirtualSize
End Property
Property Get VirtualAddress() As Long
VirtualAddress = st.VirtualAddress
End Property
Property Get Characteristics() As Long
Characteristics = st.Characteristics
End Property
