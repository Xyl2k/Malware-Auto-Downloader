VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "PE"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Private Type Props
    hMapFile As Long
    hFile As Long
    dwFileSize As Long
    FileName As String
    FileLoaded As Boolean
End Type

Private Type Objects
    DosHeader As DosHeader
    NTHeader As NTHeader
    Sections As Sections
End Type

Dim Mem As Props    'Properties For this Class
Dim nFile As Props  'Properties For New File
Dim Obj As Objects

Property Get FileName() As String
FileName = Mem.FileName
End Property
Property Get Base() As Long
Base = Mem.hMapFile
End Property

Function LoadFile(ByVal FileName As String) As Boolean
On Error Resume Next
Mem.FileLoaded = False
Mem.hFile = CreateFile(FileName, GENERIC_READ, FILE_SHARE_READ, ByVal 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0)
If Mem.hFile = -1 Then
    SetError "Error Opening File. Check if the File exists and is not locked."
    Exit Function
End If
Mem.FileName = FileName
Mem.dwFileSize = GetFileSize(Mem.hFile, 0)
If Mem.dwFileSize = 0 Then
    SetError "FileSize Error. Check if the file is locked by other applications"
    Exit Function
End If
Mem.hMapFile = GlobalAlloc(GMEM_FIXED Or GMEM_ZEROINIT, Mem.dwFileSize)
If Mem.hMapFile = 0 Then
    SetError "Error Allocating Memory Space."
    Exit Function
End If
If ReadFile(Mem.hFile, ByVal Mem.hMapFile, Mem.dwFileSize, 0, ByVal 0) = 0 Then
    SetError "Error in Reading File"
    Exit Function
End If
'***********Close the File Handle
DosHeader.Fill Mem.hMapFile
If DosHeader.Magic <> IMAGE_DOS_SIGNATURE Then
    CloseFile
    SetError "Not a Valid PE File.Magic Number not Found."
    Exit Function
End If
NTHeader.Fill Base + DosHeader.lFaNew
If NTHeader.Signature <> IMAGE_NT_SIGNATURE Then
    CloseFile
    SetError "Not a Valid PE File.PE Signature not Found."
    Exit Function
End If
Dim idx As Long, bytes() As Byte, dwBytes As Long
Dim tmpSection As Section
Dim dwFirstSecOffset As Long
dwFirstSecOffset = DosHeader.lFaNew + NTHeader.Length 'First Section Occurs After NtHeader
For idx = 0 To NTHeader.FileHeader.NumberOfSections - 1
    Set tmpSection = New Section
    tmpSection.Fill Base + dwFirstSecOffset + idx * tmpSection.Length
    tmpSection.FillCode Base + tmpSection.PointerToRawData, tmpSection.SizeOfRawData
    Sections.add tmpSection
Next

Mem.FileLoaded = True
CloseFile
LoadFile = True
End Function
Function SaveFile(ByVal FileName As String) As Boolean
Dim tMem As Props
Dim bytes() As Byte, idx As Long, OffSet As Long, dwFirstOffSet As Long
If Mem.FileLoaded = False Then
    SetError "Source PE not loaded. Make sure the input was a valid PE File."
    Exit Function
End If
nFile = tMem

nFile.dwFileSize = DosHeader.Length + NTHeader.Length + LenBytes(DosStub)
nFile.dwFileSize = nFile.dwFileSize + Sections.Count * Sections(1).Length
Dim fPtr As Long, tmp As Long
For idx = 1 To Sections.Count
    tmp = Sections(idx).PointerToRawData + Sections(idx).SizeOfRawData
    If tmp > fPtr Then fPtr = tmp
Next
nFile.dwFileSize = nFile.dwFileSize + fPtr
nFile.hFile = CreateFile(FileName, GENERIC_WRITE, FILE_SHARE_WRITE Or FILE_SHARE_READ, ByVal 0, CREATE_ALWAYS, 0, 0)
If nFile.hFile = -1 Then
    SetError "Error Creating File on Disk! Make sure the disk is ready."
    Exit Function
End If
nFile.hMapFile = GlobalAlloc(GMEM_FIXED Or GMEM_ZEROINIT, nFile.dwFileSize)
If nFile.hMapFile = 0 Then
    SetError "Error Allocating Memory! Try closing some applications."
    CloseNewFile
    Exit Function
End If
If DosHeader.CopyTo(nFile.hMapFile) = False Then
    SetError "Error Setting Dos Header!"
    CloseNewFile
    Exit Function
End If
'************Copy The Dos Stub**************

bytes = DosStub
idx = UBound(bytes)
CopyMemory ByVal NewBase + DosHeader.Length, bytes(0), idx
'***********Modify Number of Sections
Dim fh  As IMAGE_FILE_HEADER
fh = NTHeader.FileHeader.Struct
fh.NumberOfSections = Sections.Count
NTHeader.FileHeader.Struct = fh
'*********************************************************
Dim hdr As IMAGE_OPTIONAL_HEADER
hdr = NTHeader.OptionalHeader.Struct
hdr.DataDirectory(11).VirtualAddress = 0
hdr.DataDirectory(11).Size = 0
NTHeader.OptionalHeader.Struct = hdr

If NTHeader.CopyTo(NewBase + DosHeader.lFaNew) = False Then
    SetError "Error Setting NT Header!"
    CloseNewFile
    Exit Function
End If
If Sections.Count < 1 Then
    SetError "PE File must contain at-least 1 section"
    CloseNewFile
    Exit Function
End If

'*************Section***************
Dim tmpSection As Section
dwFirstOffSet = DosHeader.lFaNew + NTHeader.Length

For idx = 1 To Sections.Count
    Set tmpSection = Sections(idx)  'Collection is 1 Based
    OffSet = NewBase + dwFirstOffSet + (idx - 1) * tmpSection.Length
    If tmpSection.CopyTo(OffSet) = False Then
        SetError "Error Setting Section: " & tmpSection.Name
        CloseNewFile
        Exit Function
    End If
    OffSet = NewBase + tmpSection.PointerToRawData
    If tmpSection.CopyCodeTo(OffSet) = False Then
        SetError "Error Setting Section Code: " & tmpSection.Name
        CloseNewFile
        Exit Function
    End If
   
Next

WriteFile nFile.hFile, ByVal NewBase, nFile.dwFileSize, 0, ByVal 0
GlobalFree NewBase
CloseNewFile
End Function




'***************************Private Procedures************
'***********************************************************

Private Sub SetError(ByVal Desc As String)
Err.Description = Desc
End Sub
Private Sub CloseFile()
CloseHandle Mem.hFile
End Sub
Private Sub CloseNewFile()

CloseHandle nFile.hFile
End Sub
Private Function PEAlign(ByVal dwTarNum As Long, ByVal dwAlignTo As Long) As Long
PEAlign = (((dwTarNum + dwAlignTo - 1) / dwAlignTo) * dwAlignTo)
End Function
Private Sub Class_Terminate()
If Mem.hMapFile <> 0 Then
    If IsBadCodePtr(Mem.hMapFile) = False Then Exit Sub
    GlobalFree Mem.hMapFile
End If
End Sub
Private Property Get NewBase() As Long
NewBase = nFile.hMapFile
End Property

'****************************Dependent Properties****************
'****************************************************************
Property Get DosStub() As Byte()
Dim dwSize As Long
dwSize = DosHeader.lFaNew - DosHeader.Length
Dim ret() As Byte
ReDim ret(dwSize - 1)
CopyMemory ret(0), ByVal Base + DosHeader.Length, dwSize
DosStub = ret
End Property
Property Get DosHeader() As DosHeader
If Obj.DosHeader Is Nothing Then
    Set Obj.DosHeader = New DosHeader
    Obj.DosHeader.SetOwner Me
End If
Set DosHeader = Obj.DosHeader
End Property
Property Get NTHeader() As NTHeader
If Obj.NTHeader Is Nothing Then
    Set Obj.NTHeader = New NTHeader
    Obj.NTHeader.SetOwner Me
End If
Set NTHeader = Obj.NTHeader
End Property
Property Get Sections() As Sections
If Obj.Sections Is Nothing Then
    Set Obj.Sections = New Sections
    Obj.Sections.SetOwner Me
End If
Set Sections = Obj.Sections
End Property
